package com.medina.car;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.View;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CarRepository CarRepository;
    @Autowired
    private View error;


    @GetMapping(path = "/medina/all")
    public @ResponseBody Iterable<Car> getAllUsers() {
        // This returns a JSON or XML with the users
        return CarRepository.findAll();
    }

    @PostMapping(path = "/medina/new") // Map ONLY POST Requests
    public @ResponseBody String addNewCar(@RequestParam String brand
            , @RequestParam String body, @RequestParam String model, @RequestParam String Price) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Car n = new Car();
        n.setBrand(brand);
        n.setBody(body);
        n.setModel(model);
        n.setPrice(Price);
        CarRepository.save(n);
        return "SUCCESS ADDING A NEW CAR";
    }

    @PutMapping(path = "/medina/")
    public @ResponseBody String updateMedinaCar(@RequestParam Integer id, @RequestBody Car updated) {
        Optional<Car> optionalCar = CarRepository.findById(id);
        if (optionalCar.isPresent()) {
            Car update = optionalCar.get();

            if (updated.getBrand() != null) {
                update.setBrand(updated.getBrand());
            }
            if (updated.getBody() != null) {
                update.setBody(updated.getBody());
            }
            if (updated.getModel() != null) {
                update.setModel(updated.getModel());
            }
            if (updated.getPrice() != null) {
                update.setPrice(updated.getPrice());
            }
            CarRepository.save(update);
            return "SUCCESS EDITING CAR";

        } else {
            return "There is no existing car with ID " + id;
        }
    }

    @DeleteMapping(path = "/medina/")
    public @ResponseBody String deleteCar(@RequestParam Integer id) {

        if (CarRepository.existsById(id)) {

            CarRepository.deleteById(id);
            return "SUCCESS DELETING CAR";
        } else {

            return "Car with ID " + id + " not found";
        }
    }

    @GetMapping(path = "/medina/")
    public @ResponseBody Object get(@RequestParam Integer id) {
        if (CarRepository.existsById(id)) {
            return CarRepository.findById(id);
        } else {
            return "There is no existing car with ID " + id;
        }
    }

    @GetMapping(path = "/medina/search")
    public @ResponseBody Object searchCarsByKey(@RequestParam String Key) {
        Iterable<Car> cars = CarRepository.findAll();
        List<Car> matchingCars = new ArrayList<>();

        for (Car car : cars) {
            if (String.valueOf(car.getId()).contains(Key) ||
                    car.getBrand().contains(Key) ||
                    car.getModel().contains(Key) ||
                    car.getBody().contains(Key)) {

                matchingCars.add(car);
            }
        }
        if (!matchingCars.isEmpty()) {
            return matchingCars;
        } else {
            return "No cars found for the provided "+Key;
        }
    }

}

